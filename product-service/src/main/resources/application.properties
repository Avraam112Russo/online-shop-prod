server.port=0

spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.use_sql=true
#spring.jpa.properties.hibernate.format_sql=true

spring.datasource.url=jdbc:mysql://localhost:3306/my_db?useSSL=false&serverTimezone=UTC
spring.datasource.username=bestuser
spring.datasource.password=bestuser

# ????????? ??? Amazon S3
#cloud.aws.credentials.accessKey=
#cloud.aws.credentials.secretKey=
cloud.aws.region.static=us-east-1


#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.hibernate.ddl-auto=update


spring.application.name=product-service
eureka.client.service-url.defaultzone=http://localhost:8761/eureka

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

## we could run many instances product-service with different id
eureka.instance.instance-id=${spring.application.name}:${random.value}

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup

## this property defined which offset(messages) after first connecting to do handle
spring.kafka.consumer.auto-offset-reset=earliest

## String deserializer key
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
## String deserializer value
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer


spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=productBalance:com.russozaripov.onlineshopproduction.event.Supply_product_DTO
## spring cache
spring.cache.type=simple

